import os
import asyncio
import sqlite3
from delivery_dates import generate_delivery_dates
from delivery_dates import get_delivery_dates, get_delivery_times
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
#GROUP_ID = os.getenv('GROUP_ID')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "/home/Dants12/telegram_bot_test/bot_data.db"

#DELIVERY_DATES = ['2024-12-23', '2024-12-24', '2024-12-25', '2024-12-26', '2024-12-27', '2024-12-28', '2024-12-29', '2024-12-30', '2024-12-31']  # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
#DELIVERY_TIMES = ['08:00 - 10:00', '10:00 - 12:00', '12:00 - 14:00', '14:00 - 17:00', '17:00 - 21:00']  # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏

MENU = {
    '1': {'name': '–°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ', 'price': 27, 'photo': '/home/Dants12/telegram_bot/img/oliv.jpg', 'ingridients': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º–æ—Ä–∫–æ–≤—å, –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ–≥—É—Ä—Ü—ã, —è–π—Ü–æ, –≥–æ—Ä–æ—à–µ–∫, –∫–æ–ª–±–∞—Å–∞, –º–∞–π–æ–Ω–µ–∑, –≥–æ—Ä—á–∏—Ü–∞, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü'},
    '2': {'name': '–°–∞–ª–∞—Ç –°–µ–ª–µ–¥–∫–∞ –ø–æ–¥ —à—É–±–æ–π', 'price': 25, 'photo': '/home/Dants12/telegram_bot/img/seld.jpg', 'ingridients': '–°–µ–ª—å–¥—å, —Å–≤–µ–∫–ª–∞, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º–æ—Ä–∫–æ–≤—å, –º–∞–π–æ–Ω–µ–∑, —è–π—Ü–æ, –ª—É–∫'},
    '3': {'name': '–°–∞–ª–∞—Ç –ú–∏–º–æ–∑–∞', 'price': 25, 'photo': '/home/Dants12/telegram_bot/img/mimosa.jpg', 'ingridients': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å, —è–π—Ü–æ, –º–æ—Ä–∫–æ–≤—å, —Å—ã—Ä, –ª—É–∫, —Ç—É–Ω–µ—Ü'},
    '4': {'name': '–°–∞–ª–∞—Ç –ö—Ä–µ–≤–µ—Ç–æ—á–Ω—ã–π', 'price': 30, 'photo': '/home/Dants12/telegram_bot/img/crab.jpg', 'ingridients': '–†–∏—Å, —Å–≤–µ–∂–∏–π –æ–≥—É—Ä–µ—Ü, –∫—É–∫—É—Ä—É–∑–∞, –º–æ—Ä–∫–æ–≤—å, —è–π—Ü–æ, –∫—Ä–µ–≤–µ—Ç–∫–∞'},
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_database():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carts (
            user_id INTEGER,
            item_id TEXT,
            quantity INTEGER,
            PRIMARY KEY (user_id, item_id),
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

def update_cart(user_id, item_id, quantity):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO carts (user_id, item_id, quantity)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id, item_id) DO UPDATE SET quantity = quantity + ?
    ''', (user_id, item_id, quantity, quantity))
    conn.commit()
    conn.close()

def get_cart(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT item_id, quantity FROM carts WHERE user_id = ?
    ''', (user_id,))
    cart = cursor.fetchall()
    conn.close()
    return cart

def update_quantity(user_id, item_id, change):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE carts SET quantity = quantity + ? WHERE user_id = ? AND item_id = ? AND quantity + ? > 0
    ''', (change, user_id, item_id, change))
    conn.commit()
    conn.close()

def clear_cart(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        DELETE FROM carts WHERE user_id = ?
    ''', (user_id,))
    conn.commit()
    conn.close()

'''
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cart'] = []
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã! üöÄ",
        reply_markup=main_menu_keyboard()
    )
'''
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    context.user_data['cart'] = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è –≤ —Ñ–∞–π–ª
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    first_name = update.effective_user.first_name or "Unknown"

    with open("user_ids.txt", "a") as file:
        file.write(f"{user_id},{username},{first_name}\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã! üöÄ",
        reply_markup=main_menu_keyboard()
    )

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏')],
            [KeyboardButton('üìã –ú–µ–Ω—é'), KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞')],
            [KeyboardButton('üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), KeyboardButton('üí¨ –û—Ç–∑—ã–≤—ã')],
        ],
        resize_keyboard=True
    )

'''
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for key, item in MENU.items():
        with open(item['photo'], 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=f"{item['name']}\n–¶–µ–Ω–∞: {item['price']} EUR\n–°–æ—Å—Ç–∞–≤: {item['ingridients']}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å {item['name']}", callback_data=f"add_{key}")
                ]])
            )
'''

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ñ–∞–π–ª
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    first_name = update.effective_user.first_name or "Unknown"

    with open("user_activity_log.txt", "a") as file:
        file.write(f"{user_id},{username},{first_name},–Ω–∞–∂–∞–ª '–ú–µ–Ω—é'\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é
    for key, item in MENU.items():
        with open(item['photo'], 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=f"{item['name']}\n–¶–µ–Ω–∞: {item['price']} EUR\n–°–æ—Å—Ç–∞–≤: {item['ingridients']}",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å {item['name']}", callback_data=f"add_{key}"),
                        InlineKeyboardButton("-", callback_data=f"decrease_{key}"),
                        InlineKeyboardButton("+", callback_data=f"increase_{key}")
                    ]
                ])
            )

'''
async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    item_id = query.data.split('_')[1]
    item = MENU[item_id]

    if 'cart' not in context.user_data or not isinstance(context.user_data['cart'], dict):
        context.user_data['cart'] = {}

    if item_id in context.user_data['cart']:
        context.user_data['cart'][item_id]['quantity'] += 1
    else:
        context.user_data['cart'][item_id] = {'name': item['name'], 'price': item['price'], 'quantity': 1}

    await query.edit_message_caption(
        f"{item['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É üõí\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {context.user_data['cart'][item_id]['quantity']}"
    )
'''

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    item_id = query.data.split('_')[1]
    add_item_to_cart(query.from_user.id, item_id, 1)

    await query.edit_message_caption(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É üõí")#(f"{item['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É üõí\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {context.user_data['cart'][item_id]['quantity']}")

'''
#—Ä–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
async def choose_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:  # –¢–µ–ø–µ—Ä—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
      #  keyboard = [
         #   [InlineKeyboardButton(date, callback_data=f"date_{date}") for date in DELIVERY_DATES]
      #  ]

         keyboard = [
             [InlineKeyboardButton(DELIVERY_DATES[i], callback_data=f"date_{DELIVERY_DATES[i]}"),
              InlineKeyboardButton(DELIVERY_DATES[i+1], callback_data=f"date_{DELIVERY_DATES[i+1]}"),
              InlineKeyboardButton(DELIVERY_DATES[i+2], callback_data=f"date_{DELIVERY_DATES[i+2]}")]
             for i in range(0, len(DELIVERY_DATES), 3)
         ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
         await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
         )
'''

async def generate_delivery_dates():
    today = datetime.utcnow()
    return [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(7)]

# –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
async def choose_delivery_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        delivery_dates = generate_delivery_dates()
        keyboard = [[InlineKeyboardButton(date, callback_data=f"date_{date}")] for date in delivery_dates]

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif update.callback_query:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        query = update.callback_query
        await query.answer()

        selected_date = query.data.split('_')[1]
        context.user_data['delivery_date'] = selected_date

        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
        times = ["10:00 - 12:00", "12:00 - 14:00", "14:00 - 16:00", "16:00 - 18:00"]
        time_keyboard = [[InlineKeyboardButton(time, callback_data=f"time_{time}")] for time in times]

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(time_keyboard)
        )

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
'''async def choose_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_time = query.data.split('_')[1]
    context.user_data['delivery_time'] = selected_time

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    selected_date = context.user_data.get('delivery_date', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ {selected_date} –≤ {selected_time}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
    )
    context.user_data['awaiting_address'] = True
'''
async def choose_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ query —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if query is None:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await query.answer()

    selected_date = query.data.split('_')[1]
    context.user_data['delivery_date'] = selected_date

    delivery_times = ["10:00 - 12:00", "12:00 - 14:00", "14:00 - 16:00", "16:00 - 18:00"]
    keyboard = [
        [InlineKeyboardButton(time, callback_data=f"time_{time}")] for time in delivery_times
    ]
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def save_delivery_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_address'):
        delivery_address = update.message.text
        context.user_data['delivery_address'] = delivery_address
        context.user_data['awaiting_address'] = False

        selected_date = context.user_data.get('delivery_date', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
        selected_time = context.user_data.get('delivery_time', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ {selected_date} –≤ {selected_time}.\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}."
        )

'''b
async def choose_delivery_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    delivery_dates = get_delivery_dates()
    keyboard = [
        [InlineKeyboardButton(date, callback_data=f"date_{date}")]
        for date in delivery_dates
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

''''''
async def choose_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    query = update.callback_query
    if query is None:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
'''
'''
async def choose_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(update)
    query = update.callback_query
    if query is None:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await query.answer()
'''
'''
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    try:
        selected_date = query.data.split('_')[1]
    except IndexError:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–Ω–æ–≤–∞.")
        return

    context.user_data['delivery_date'] = selected_date

    delivery_times = get_delivery_times()
    keyboard = [
        [InlineKeyboardButton(time, callback_data=f"time_{time}")]
        for time in delivery_times
    ]
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
''''''
async def choose_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("10:00 - 12:00", callback_data="time_10:00 - 12:00")],
                [InlineKeyboardButton("12:00 - 14:00", callback_data="time_12:00 - 14:00")],
                [InlineKeyboardButton("14:00 - 16:00", callback_data="time_14:00 - 16:00")],
                [InlineKeyboardButton("16:00 - 18:00", callback_data="time_16:00 - 18:00")]
            ])
        )
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    elif update.callback_query:
        query = update.callback_query
        await query.answer()

        selected_time = query.data.split('_')[1]
        context.user_data['delivery_time'] = selected_time

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {selected_time}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å."
        )
        context.user_data['awaiting_address'] = True
    else:
        # –ï—Å–ª–∏ –Ω–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def request_delivery_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query
        query = update.callback_query
        await query.answer()

        selected_date = query.data.split('_')[1]
        context.user_data['delivery_date'] = selected_date

        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è
        keyboard = [
            [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in DELIVERY_TIMES]
        ]

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def save_delivery_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query
        query = update.callback_query
        await query.answer()

        selected_time = query.data.split('_')[1]
        context.user_data['delivery_time'] = selected_time

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data['delivery_time']}\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏."
        )

        context.user_data['awaiting_address'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞

    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —ç—Ç–æ –Ω–µ callback –∑–∞–ø—Ä–æ—Å.")

async def save_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_address'):
        delivery_address = update.message.text
        context.user_data['delivery_address'] = delivery_address
        context.user_data['awaiting_address'] = False

        await update.message.reply_text(
            f"–í–∞—à –∞–¥—Ä–µ—Å: {delivery_address}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞",
            reply_markup=main_menu_keyboard()
        )
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É
#    await context.bot.send_message(
#        chat_id=GROUP_ID,  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
 #       text=f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.effective_user.username}:\n{order_summary}"
 #   )
m'''

'''
async def handle_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "paypal_payment":
        await query.edit_message_text(
            "üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ PayPal.\n"
            "üëâ [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ PayPal](https://paypal.com)\\.\n"  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –ø–æ—Å–ª–µ URL
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /confirm_payment.",
            parse_mode="MarkdownV2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        )
    elif query.data == "bank_transfer":
        await query.edit_message_text(
            "üè¶ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n"
            "üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: **1234 5678 9012 3456**\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: Karina Usane\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /confirm_payment.",
            parse_mode="MarkdownV2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        )
'''
async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
    await context.bot.send_message(
        chat_id=GROUP_ID,
        text=f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.effective_user.username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤."
    )

async def modify_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    action = data[0]
    item_id = data[1]

    if action == "add":
        update_cart(query.from_user.id, item_id, 1)
    elif action == "increase":
        update_quantity(query.from_user.id, item_id, 1)
    elif action == "decrease":
        update_quantity(query.from_user.id, item_id, -1)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    cart = get_cart(query.from_user.id)
    quantity = next((q for i, q in cart if i == item_id), 0)
    item = MENU[item_id]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await query.edit_message_caption(
        caption=f"{item['name']}\n–¶–µ–Ω–∞: {item['price']} EUR\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–°–æ—Å—Ç–∞–≤: {item['ingridients']}",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("-", callback_data=f"decrease_{item_id}"),
                InlineKeyboardButton(f"{quantity}", callback_data="noop"),
                InlineKeyboardButton("+", callback_data=f"increase_{item_id}")
            ]
        ])
    )

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart = get_cart(update.effective_user.id)
    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    cart_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total_price = 0
    for item_id, quantity in cart:
        item = MENU[item_id]
        cart_text += f"- {item['name']} x{quantity} ‚Äî {item['price'] * quantity} EUR\n"
        total_price += item['price'] * quantity

    cart_text += f"\n–ò—Ç–æ–≥–æ: {total_price} EUR"
    await update.message.reply_text(cart_text)

'''
async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart = context.user_data.get('cart', {})
    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí")
        return

    total_sum = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    for item_id, details in cart.items():
        subtotal = details['price'] * details['quantity']
        total_sum += subtotal
        cart_text += f"- {details['name']} (x{details['quantity']}) - {subtotal} EUR\n"

    cart_text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} EUR"
    await update.message.reply_text(cart_text)
'''

async def clear_cart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_cart(update.effective_user.id)
    await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart = get_cart(update.effective_user.id)
    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    cart_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n"
    total_price = 0
    for item_id, quantity in cart:
        item = MENU[item_id]
        cart_text += f"- {item['name']} x{quantity} ‚Äî {item['price'] * quantity} EUR\n"

        total_price += item['price'] * quantity

    cart_text += f"\n–ò—Ç–æ–≥–æ: {total_price} EUR\n"
    cart_text += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data.get('delivery_date')}\n"
    cart_text += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data.get('delivery_time')}\n"
    cart_text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data.get('delivery_address')}\n"

    await update.message.reply_text(f"{cart_text}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üöÄ")

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{update.effective_user.username or '–ö–ª–∏–µ–Ω—Ç'}:\n{cart_text}"
    )

    clear_cart(update.effective_user.id)

'''
async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart = context.user_data.get('cart', {})
    if not cart:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    total_sum = sum(details['price'] * details['quantity'] for details in cart.values())

    order_summary = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n"
    for item_id, details in cart.items():
        order_summary += f"{details['name']} (x{details['quantity']}) - {details['price']} EUR\n"

    order_summary += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} EUR\n"
    order_summary += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data.get('delivery_date')}\n"
    order_summary += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data.get('delivery_time')}\n"
    order_summary += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data.get('delivery_address')}\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É
    await context.bot.send_message(
        chat_id=GROUP_ID,  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
        text=f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.effective_user.username}:\n{order_summary}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üòä"
    )

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    context.user_data['cart'] = {}
'''
def main():
    initialize_database()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex('üìã –ú–µ–Ω—é'), menu))
    app.add_handler(MessageHandler(filters.Regex('üõí –ö–æ—Ä–∑–∏–Ω–∞'), view_cart))
    #app.add_handler(MessageHandler(filters.Regex('üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), process_order))
    app.add_handler(MessageHandler(filters.Regex('üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), checkout))
    app.add_handler(MessageHandler(filters.Regex('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'), clear_cart_command))
    app.add_handler(CallbackQueryHandler(modify_cart, pattern="^(add|increase|decrease)_"))
    app.add_handler(MessageHandler(filters.Regex('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'), choose_delivery_time))
    app.add_handler(CallbackQueryHandler(add_to_cart, pattern="^add_"))
    app.add_handler(CallbackQueryHandler(choose_delivery_time, pattern=r"^date_"))
    #app.add_handler(CallbackQueryHandler(choose_delivery_time, pattern=r"^date_"))
    #app.add_handler(CallbackQueryHandler(request_delivery_address, pattern="^date_"))
    app.add_handler(MessageHandler(filters.Regex('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'), choose_delivery_time))
    app.add_handler(MessageHandler(filters.Regex('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'), choose_delivery_date))
    app.add_handler(CallbackQueryHandler(choose_delivery_date, pattern="^date_"))
    app.add_handler(CallbackQueryHandler(choose_delivery_time, pattern="^time_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_delivery_address))
    app.add_handler(CallbackQueryHandler(choose_delivery_time, pattern="^time_"))
    app.add_handler(CallbackQueryHandler(save_delivery_address, pattern="^time_"))
    #app.add_handler(CallbackQueryHandler(handle_payment_selection, pattern="^(paypal_payment|bank_transfer)$"))
    #app.add_handler(CommandHandler("confirm_payment", confirm_payment))
    #app.add_handler(MessageHandler(filters.TEXT, save_address))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞

    app.run_polling()

if __name__ == '__main__':
    main()
